08/08/24
needed to install gforth on raspberry pi5 
sudo apt install gforth
https://discord.com/channels/644405956494753803/1155161075717767189
https://mecrisp-ice.readthedocs.io/en/latest/
Mecrisp Ice Unofficial Documentation!

Mecrisp Ice is a family of 16, 32 and 64 bit soft core forth processors written in Verilog and based on the J1 stack machine. Mecrisp Ice supports the following boards.
Supported Boards

blackice2
	

hx8k-32bit
	

tinyfpga-bx

fomu
	

icebreaker
	

ulx3s

fomu-ledcomm
	

mch2022
	

ulx3s-usb-experimental

hx1k
	

mystorm
	

hx8k

nandland
	

Pico-Ice
	

This repository includes:

    ready-to-fly versions of the J1 for many boards. Search for your board name in the root directory change into that directory, read the local README, and type “./compile”. That will generate the bitstream (also called gateware ) for that board. How to download it to your board will depend on the specific board and operating system.

    Verilog definitions for the various processors, as well as additional useful modules in ./common-verilog.

    Ready-to-emulate verilator simulators for the different versions in ./verilator*

    Cross compilers for the different versions, and the definitions of the various instructions sets are located in ./common-crosscompiler.

    An extended version of the Hayes-Forth test suite is located in ./testsuite. The original documentation is in German and computer generated translations are available in English.

    Pascal simulators are also in ./common-crosscompiler.

    A easy-to-use starting point for defining your own board can be found in ./skeletalstructure and

If you have any questions, please post them on our discussion board
Mecrisp Ice, and its documentation are under active development. The 16 bit dual port version and the 16 port quickstore version are both flying in space. Lots more people are using them here on earth.

Posting issues and pull requests is most welcome. I am currently writing a master’s thesis using Mecrisp Ice. By August the publication embargo should be lifted, and a lot more material will hopefully be added to this site.

https://sourceforge.net/p/mecrisp/discussion/general/thread/350a65f919/

Chrisotpher Lozinski - 2024-04-09

Here is an updated version of the Pico-Ice port.
The big change is that is that the ICE40UP5K has 30 separate four kbit ram blocks, not 32. So that is now fixed in both the verilog and the Forth.
I also moved the verilog from ./icestorm to ./verilog.
ALso generally I am just much better at workingj with this code.
It is a git repository, so that it is easy to see the changes.
I am busy trying to test it with e4thcom, so that is why the errors were caught.

Info: Device utilisation:
Info: ICESTORM_LC: 2787/ 5280 52%
Info: ICESTORM_RAM: 30/ 30 100%
Download pico-ice2.6d.tar 
tar xvf pico-ice2.6d.tar


Cross Compiler

This page documents the Mecrisp-Ice cross compiler. The cross compiler runs in gForth, on the desktop, takes an instruction set, and a nucleus file and generates a hexadecimal file which verilog can load into the FPGA. In mecrisp-ice that hex file is merged on the desktop with mecrisp libraries and your applicaiton program before being downloaded in the FPGA bitstream.

There is another way you could use the cross compiler. Once the nucleus is cross-compiled, you could download it to the FPGA, load programs to the FPGA, and save them to the Flash, maybe copy them to other FPGA’s bitstreams. Yosys lets you copy a executable image into a bit stream.

The cross compiler suports both code folding, and inlining.

@PythonLinks: “the cross compiler is most difficult to understand.”

@Mecrisp: “I agree. And this is after I commented it. The one by James Bowman is even harder to read.”